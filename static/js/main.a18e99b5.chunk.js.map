{"version":3,"sources":["components/todoitem.js","App.js","index.js"],"names":["Component","App","useState","list","setlist","text","settext","edittext","setedittext","editindex","setindex","genuuid","uuid_","uuidv4","filter","item","key","length","useEffect","localStorage","todo","JSON","parse","setItem","stringify","className","TextField","style","width","marginRight","value","onChange","e","target","placeholder","Button","variant","color","onClick","ls","concat","map","index","Paper","Typography","listdup","i","edititem","cursor","Alert","margin","severity","rootElement","document","getElementById","ReactDOM","render"],"mappings":"iUAMmBA,Y,QCIJ,SAASC,IAAO,IAAD,EACJC,mBAAS,IADL,mBACrBC,EADqB,KACfC,EADe,OAEJF,mBAAS,IAFL,mBAErBG,EAFqB,KAEfC,EAFe,OAGIJ,mBAAS,IAHb,mBAGrBK,EAHqB,KAGXC,EAHW,OAICN,mBAAS,MAJV,mBAIrBO,EAJqB,KAIXC,EAJW,KAKtBC,EAAU,WACd,OAAa,CACZ,IAAIC,EAAQC,cAEX,GAA2B,IADVV,EAAKW,QAAO,SAACC,GAAD,OAAUA,EAAKC,MAAQJ,KACpCK,OAAc,OAAOL,IA0BzC,OAREM,qBAAU,WACLC,aAAaC,MACdhB,EAAQiB,KAAKC,MAAMH,aAAaC,SAClC,IACFF,qBAAU,WACLC,cACDA,aAAaI,QAAQ,OAAOF,KAAKG,UAAUrB,MAC7C,CAACA,IAEH,sBAAKsB,UAAU,MAAf,UACE,sBAAKA,UAAU,UAAf,UAEI,cAACC,EAAA,EAAD,CACEC,MAAO,CAAEC,MAAO,MAAMC,YAAY,MAClCC,MAAOzB,EACP0B,SAAU,SAACC,GAAD,OAAO1B,EAAQ0B,EAAEC,OAAOH,QAClCI,YAAa,eAGjB,cAACC,EAAA,EAAD,CACEC,QAAS,YACTT,MAAO,CAAEC,MAAO,OAChBS,MAAO,UACPC,QAnCQ,WACdlC,GAAQ,SAACmC,GAAD,OAAQA,EAAGC,OAAO,CAAExB,IAAKL,IAAWN,KAAMA,OAClDC,EAAQ,KA6BJ,oBAWgB,IAAhBH,EAAKc,OACPd,EAAKsC,KAAI,SAAC1B,EAAK2B,GAAS,OAClB,eAACC,EAAA,EAAD,CAAOlB,UAAU,OAAjB,UACA,qBAAKA,UAAU,OAAf,SACKhB,IAAciC,EAAO,cAACE,EAAA,EAAD,UAAa7B,EAAKV,OAAmB,cAACqB,EAAA,EAAD,CAAWI,MAAOvB,GAAkBQ,EAAKV,KAAM0B,SAAU,SAAAC,GAAC,OAAExB,EAAYwB,EAAEC,OAAOH,QAAQH,MAAO,CAACC,MAAM,WAEtK,sBAAKH,UAAU,UAAf,UACEhB,IAAciC,EAAM,cAAC,IAAD,CAAkBJ,QAAS,WAAK5B,EAAS,MAAMF,EAAY,IA7C5E,SAACQ,EAAIX,GACnB,IAAMwC,EAAU1C,EACd,IAAK,IAAI2C,KAAKD,EACRA,EAAQC,GAAG9B,MAAQA,IACnB6B,EAAQC,GAAGzC,KAAOA,GAEzBD,EAAQyC,GAuCqFE,CAAShC,EAAKC,IAAIT,IAAYoB,MAAO,CAACqB,OAAO,aAAc,cAAC,IAAD,CAAkBV,QAAS,WAAK5B,EAASgC,IAASf,MAAO,CAACqB,OAAO,aAC/M,cAAC,IAAD,CACdrB,MAAO,CAACqB,OAAO,WACCV,QAAS,WAvDP,IAACtB,IAwDOD,EAAKC,IAvD3BZ,GAAQ,SAACmC,GAAD,OAAQA,EAAGzB,QAAO,SAACC,GAAD,OAAUA,EAAKC,MAAQA,oBA4D9C,cAACiC,EAAA,EAAD,CAAOtB,MAAO,CAACuB,OAAO,SAAUC,SAAS,OAAzC,+CC9EP,IAAMC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAACvD,EAAD,MAEFmD,K","file":"static/js/main.a18e99b5.chunk.js","sourcesContent":["import DeleteOutlineIcon from \"@material-ui/icons/DeleteOutline\";\r\nimport EditOutlinedIcon from \"@material-ui/icons/EditOutlined\";\r\nimport DoneOutlinedIcon from \"@material-ui/icons/DoneOutlined\";\r\nimport {Component} from \"react\";\r\nimport {Paper,Typography,TextField} from \"@material-ui/core\"\r\n\r\nclass Todo extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {text:props.item.text,editing:false};\r\n    }\r\n    changetext = (e)=>{\r\n        this.setState(st => ({text:e.target.value ,editing:st.editing}))\r\n    }\r\n    changeedit=()=>{\r\n        this.props.editfunction(this.props.item.key,this.state.text);\r\n        this.setState(st => ({text:this.state.text ,editing:!st.editing}))\r\n    }\r\n    render(){\r\n        return(\r\n            <Paper className=\"todo\">\r\n            <div className=\"info\">\r\n              {!this.state.editing?<Typography>{this.state.text}</Typography>:<TextField value={this.state.text} onChange={this.changetext} style={{width:\"95%\"}}/>}\r\n            </div>\r\n            <div className=\"control\">\r\n             {this.state.editing?<DoneOutlinedIcon onClick={this.changeedit} style={{cursor:\"pointer\"}}/>:<EditOutlinedIcon onClick={this.changeedit} style={{cursor:\"pointer\"}}/>}\r\n              <DeleteOutlineIcon\r\nstyle={{cursor:\"pointer\"}}\r\n                onClick={() => {\r\n                  this.props.deletefunction(this.props.item.key);\r\n                }}\r\n              />\r\n            </div>\r\n          </Paper>\r\n        )\r\n    }\r\n}\r\nexport default Todo;","import \"./styles.css\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { useState,useEffect } from \"react\";\r\nimport { TextField, Button,Paper,Typography } from \"@material-ui/core\";\r\nimport Todo from \"./components/todoitem\";\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport DeleteOutlineIcon from \"@material-ui/icons/DeleteOutline\";\r\nimport EditOutlinedIcon from \"@material-ui/icons/EditOutlined\";\r\nimport DoneOutlinedIcon from \"@material-ui/icons/DoneOutlined\";\r\n\r\nexport default function App() {\r\n  const [list, setlist] = useState([]);\r\n  const [text, settext] = useState(\"\");\r\n  const [edittext, setedittext] = useState(\"\");\r\n  const [editindex,setindex] = useState(null);\r\n  const genuuid = () => {\r\n    while (true) {\r\n     var uuid_ = uuidv4();\r\n     var formattedls = list.filter((item) => item.key === uuid_);\r\n      if (formattedls.length === 0) return uuid_;\r\n    }\r\n  };\r\n  const delitem = (key) => {\r\n    setlist((ls) => ls.filter((item) => item.key !== key));\r\n  };\r\n  const additem = () => {\r\n    setlist((ls) => ls.concat({ key: genuuid(), text: text }));\r\n    settext(\"\");\r\n  };\r\n  const edititem=(key,text)=>{\r\n   const listdup = list;\r\n     for (let i in listdup){\r\n        if(listdup[i].key === key )\r\n           listdup[i].text = text\r\n     }\r\n    setlist(listdup)\r\n}\r\n    useEffect(()=>{\r\n      if(localStorage.todo)\r\n        setlist(JSON.parse(localStorage.todo))\r\n    },[])\r\n    useEffect(()=>{\r\n      if(localStorage)\r\n        localStorage.setItem(\"todo\",JSON.stringify(list));\r\n    },[list])\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"addtodo\">\r\n\r\n          <TextField\r\n            style={{ width: \"75%\",marginRight:\"5%\" }}\r\n            value={text}\r\n            onChange={(e) => settext(e.target.value)}\r\n            placeholder={\"task to do\"}\r\n          />\r\n\r\n        <Button\r\n          variant={\"contained\"}\r\n          style={{ width: \"20%\" }}\r\n          color={\"primary\"}\r\n          onClick={additem}\r\n        >\r\n\r\n          add\r\n        </Button>\r\n      </div>\r\n      {\r\n        list.length !== 0?\r\n      list.map((item,index)=>{return(\r\n            <Paper className=\"todo\">\r\n            <div className=\"info\">\r\n              {!(editindex === index)?<Typography>{item.text}</Typography>:<TextField value={edittext?edittext:item.text} onChange={e=>setedittext(e.target.value)} style={{width:\"95%\"}}/>}\r\n            </div>\r\n            <div className=\"control\">\r\n             {editindex === index?<DoneOutlinedIcon onClick={()=>{setindex(null);setedittext(\"\");edititem(item.key,edittext)}} style={{cursor:\"pointer\"}}/>:<EditOutlinedIcon onClick={()=>{setindex(index)}} style={{cursor:\"pointer\"}}/>}\r\n              <DeleteOutlineIcon\r\nstyle={{cursor:\"pointer\"}}\r\n                onClick={() => {\r\n                  delitem(item.key);\r\n                }}\r\n              />\r\n            </div>\r\n          </Paper>)\r\n    }):<Alert style={{margin:\".5rem\"}} severity=\"info\">your tasks will be shown here!</Alert>\r\n\r\n    }\r\n    </div>\r\n  );\r\n}\r\n","import { StrictMode } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n  <StrictMode>\r\n    <App />\r\n  </StrictMode>,\r\n  rootElement\r\n);\r\n"],"sourceRoot":""}