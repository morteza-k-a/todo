{"version":3,"sources":["App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["App","useState","list","setlist","text","settext","edittext","setedittext","editindex","setindex","showInfo","setShowInfo","setloaded","open","setOpen","genuuid","uuid_","uuidv4","filter","item","key","length","handleClose","useEffect","localStorage","todo","JSON","parse","ld","setItem","stringify","theme","useTheme","fullScreen","useMediaQuery","breakpoints","down","className","AppBar","position","Toolbar","Grid","container","alignItems","justify","Typography","variant","IconButton","style","color","onClick","Dialog","onClose","aria-labelledby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","Button","TextField","autoFocus","margin","label","fullWidth","value","onChange","e","target","ls","concat","map","index","Paper","width","listdup","i","edititem","cursor","Alert","severity","Fab","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.c6c4f8bf.chunk.js","sourcesContent":["import \"./styles.css\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { useState, useEffect } from \"react\";\r\nimport {\r\n  TextField,\r\n  Button,\r\n  Paper,\r\n  Typography,\r\n  Fab,\r\n  Toolbar,\r\n  AppBar,\r\n  Grid,\r\n  IconButton,\r\n} from \"@material-ui/core\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport DeleteOutlineIcon from \"@material-ui/icons/DeleteOutline\";\r\nimport EditOutlinedIcon from \"@material-ui/icons/EditOutlined\";\r\nimport DoneOutlinedIcon from \"@material-ui/icons/DoneOutlined\";\r\nimport AddOutlinedIcon from \"@material-ui/icons/AddOutlined\";\r\nimport InfoOutlinedIcon from \"@material-ui/icons/InfoOutlined\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport { useTheme } from \"@material-ui/core/styles\";\r\n\r\nexport default function App() {\r\n  const [list, setlist] = useState([]);\r\n  const [text, settext] = useState(\"\");\r\n  const [edittext, setedittext] = useState(\"\");\r\n  const [editindex, setindex] = useState(null);\r\n  const [showInfo, setShowInfo] = useState(false);\r\n  const [loaded, setloaded] = useState(false);\r\n  const [open, setOpen] = useState(false);\r\n  const genuuid = () => {\r\n    while (true) {\r\n      var uuid_ = uuidv4();\r\n      var formattedls = list.filter((item) => item.key === uuid_);\r\n      if (formattedls.length === 0) return uuid_;\r\n    }\r\n  };\r\n  const delitem = (key) => {\r\n    setlist((ls) => ls.filter((item) => item.key !== key));\r\n  };\r\n  const additem = () => {\r\n    if (text) {\r\n      handleClose();\r\n      setlist((ls) => ls.concat({ key: genuuid(), text: text }));\r\n      settext(\"\");\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    setShowInfo(false);\r\n  };\r\n  const edititem = (key, text) => {\r\n    const listdup = list;\r\n    for (let i in listdup) {\r\n      if (listdup[i].key === key) listdup[i].text = text;\r\n    }\r\n\r\n    if (localStorage) localStorage.setItem(\"todo\", JSON.stringify(listdup));\r\n    setlist(listdup);\r\n  };\r\n  useEffect(() => {\r\n    if (localStorage.todo) setlist(JSON.parse(localStorage.todo));\r\n    setloaded((ld) => !ld);\r\n  }, []);\r\n  useEffect(() => {\r\n    if (localStorage) localStorage.setItem(\"todo\", JSON.stringify(list));\r\n  }, [list]);\r\n  const theme = useTheme();\r\n  const fullScreen = useMediaQuery(theme.breakpoints.down(\"sm\"));\r\n  return (\r\n    <div className=\"App\">\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Grid container alignItems={\"center\"} justify={\"space-between\"}>\r\n            <Typography variant=\"h6\">Todo</Typography>\r\n            <IconButton style={{color:\"white\"}} onClick={()=>setShowInfo(true)}>\r\n              <InfoOutlinedIcon />\r\n            </IconButton>\r\n          </Grid>\r\n        </Toolbar>\r\n      </AppBar>\r\n      {/* dialog for todo info */}\r\n      <Dialog\r\n        fullScreen={fullScreen}\r\n        open={showInfo}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"form-dialog-title\"\r\n      >\r\n        <DialogTitle id=\"form-dialog-title\">about this app</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            You can add the tasks that you have planned for your day in this application so you would remeber them. <br />\r\n            this app is actually a PWA, which means you can install it on your local machine and use it even when you don't have an internet connection.\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            dismiss\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      {/* dialog for adding to do */}\r\n      <Dialog\r\n        fullScreen={fullScreen}\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"form-dialog-title\"\r\n      >\r\n        <DialogTitle id=\"form-dialog-title\">add to-do</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            You got a task that you should do? <br />\r\n            Write it down in the box and click the add button to add it to the\r\n            list.\r\n          </DialogContentText>\r\n          <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            id=\"taskTD\"\r\n            label=\"task to do\"\r\n            fullWidth\r\n            value={text}\r\n            onChange={(e) => settext(e.target.value)}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={additem} color=\"primary\">\r\n            add\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      {list.length !== 0 ? (\r\n        list.map((item, index) => {\r\n          return (\r\n            <Paper className=\"todo\">\r\n              <div className=\"info\">\r\n                {!(editindex === index) ? (\r\n                  <Typography>{item.text}</Typography>\r\n                ) : (\r\n                  <TextField\r\n                    value={edittext}\r\n                    onChange={(e) => setedittext(e.target.value)}\r\n                    style={{ width: \"95%\" }}\r\n                  />\r\n                )}\r\n              </div>\r\n              <div className=\"control\">\r\n                {editindex === index ? (\r\n                  <DoneOutlinedIcon\r\n                    onClick={() => {\r\n                      setindex(null);\r\n                      setedittext(\"\");\r\n                      edititem(item.key, edittext);\r\n                    }}\r\n                    style={{ cursor: \"pointer\" }}\r\n                  />\r\n                ) : (\r\n                  <EditOutlinedIcon\r\n                    onClick={() => {\r\n                      setindex(index);\r\n                      setedittext(item.text);\r\n                    }}\r\n                    style={{ cursor: \"pointer\" }}\r\n                  />\r\n                )}\r\n                <DeleteOutlineIcon\r\n                  style={{ cursor: \"pointer\" }}\r\n                  onClick={() => {\r\n                    delitem(item.key);\r\n                  }}\r\n                />\r\n              </div>\r\n            </Paper>\r\n          );\r\n        })\r\n      ) : (\r\n        <Alert style={{ margin: \".5rem\" }} severity=\"info\">\r\n          your tasks will be shown here!\r\n        </Alert>\r\n      )}\r\n      {!open ? (\r\n        <Fab\r\n          color={\"primary\"}\r\n          className=\"fab\"\r\n          style={{ position: \"absolute\" }}\r\n          onClick={() => {\r\n            setOpen(true);\r\n          }}\r\n        >\r\n          <AddOutlinedIcon />\r\n        </Fab>\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}