{"version":3,"sources":["App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["App","useState","list","setlist","text","settext","edittext","setedittext","editindex","setindex","setloaded","genuuid","uuid_","uuidv4","filter","item","key","length","useEffect","localStorage","todo","JSON","parse","ld","setItem","stringify","className","TextField","style","width","marginRight","value","onChange","e","target","placeholder","Button","variant","color","onClick","ls","concat","map","index","Paper","Typography","listdup","i","edititem","cursor","Alert","margin","severity","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.26300549.chunk.js","sourcesContent":["import \"./styles.css\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { useState,useEffect } from \"react\";\r\nimport { TextField, Button,Paper,Typography,CircularProgress } from \"@material-ui/core\";\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport DeleteOutlineIcon from \"@material-ui/icons/DeleteOutline\";\r\nimport EditOutlinedIcon from \"@material-ui/icons/EditOutlined\";\r\nimport DoneOutlinedIcon from \"@material-ui/icons/DoneOutlined\";\r\n\n\r\n\r\nexport default function App() {\r\n  const [list, setlist] = useState([]);\r\n  const [text, settext] = useState(\"\");\r\n  const [edittext, setedittext] = useState(\"\");\r\n  const [editindex,setindex] = useState(null);\r\n  const [loaded,setloaded] = useState(false);\r\n  const genuuid = () => {\r\n    while (true) {\r\n     var uuid_ = uuidv4();\r\n     var formattedls = list.filter((item) => item.key === uuid_);\r\n      if (formattedls.length === 0) return uuid_;\r\n    }\r\n  };\r\n  const delitem = (key) => {\r\n    setlist((ls) => ls.filter((item) => item.key !== key));\r\n  };\r\n  const additem = () => {\r\n    if(text){\r\n    setlist((ls) => ls.concat({ key: genuuid(), text: text }));\r\n    settext(\"\");\r\n                }\r\n  };\r\n  const edititem=(key,text)=>{\r\n   const listdup = list;\r\n     for (let i in listdup){\r\n        if(listdup[i].key === key )\r\n           listdup[i].text = text\r\n     }\r\n\r\n    if(localStorage)\r\n        localStorage.setItem(\"todo\",JSON.stringify(listdup));\r\n    setlist(listdup)\r\n\r\n}\r\n    useEffect(()=>{\r\n      if(localStorage.todo)\r\n        setlist(JSON.parse(localStorage.todo))\r\n      setloaded(ld=>!ld)\r\n    },[])\r\n    useEffect(()=>{\r\n      if(localStorage)\r\n        localStorage.setItem(\"todo\",JSON.stringify(list));\r\n    },[list])\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"addtodo\">\r\n\r\n          <TextField\r\n            style={{ width: \"75%\",marginRight:\"5%\" }}\r\n            value={text}\r\n            onChange={(e) => settext(e.target.value)}\r\n            placeholder={\"task to do\"}\r\n          />\r\n\r\n        <Button\r\n          variant={\"contained\"}\r\n          style={{ width: \"20%\" }}\r\n          color={\"primary\"}\r\n          onClick={additem}\r\n        >\r\n\r\n          add\r\n        </Button>\r\n      </div>\r\n      {\r\n        list.length !== 0?\r\n      list.map((item,index)=>{return(\r\n            <Paper className=\"todo\">\r\n            <div className=\"info\">\r\n              {!(editindex === index)?<Typography>{item.text}</Typography>:<TextField value={edittext} onChange={e=>setedittext(e.target.value)} style={{width:\"95%\"}}/>}\r\n            </div>\r\n            <div className=\"control\">\r\n             {editindex === index?<DoneOutlinedIcon onClick={()=>{setindex(null);setedittext(\"\");edititem(item.key,edittext)}} style={{cursor:\"pointer\"}}/>:<EditOutlinedIcon onClick={()=>{setindex(index);setedittext(item.text)}} style={{cursor:\"pointer\"}}/>}\r\n              <DeleteOutlineIcon\r\nstyle={{cursor:\"pointer\"}}\r\n                onClick={() => {\r\n                  delitem(item.key);\r\n                }}\r\n              />\r\n            </div>\r\n          </Paper>)\r\n    }):<Alert style={{margin:\".5rem\"}} severity=\"info\">your tasks will be shown here!</Alert>\r\n\r\n    }\r\n    </div>\r\n\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}